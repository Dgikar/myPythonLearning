import sys

"""
Изменяемые и неизменяемые типы данных:

    Изменяемые и неизменяемые типы в Python
        Все переменные в Python делятся на два типа: изменяемые и неизменяемые.
        Изменяемый тип переменных - связан с тем, что, как только вы меняете значение переменной, то в памяти создается
        новый объект, в котором и будет храниться новое значение вашей переменной. Неизменяемый тип переменных — при
        изменении значения в памяти нового объекта не создается, но меняются свойства уже существующего.

    Как работают переменные в Python
        Для того, чтобы понять идею изменяемых и неизменяемых типов,  рассмотрим, как работают переменные в Python.
        Когда вы создаете переменную, то вы по сути создаете ссылку на область оперативной памяти, в которой хранится
        объект. Именно внутри этого объекта и хранится информация о типе переменной, о значении и всем наборе свойств,
        связанных с этим объектом. Т.е. тип переменной в Python определяется типом объекта, а не типом ссылки.

    Как устроены переменные в Python
        Предположим, что вы объявили обычную переменную. Например:

            number_one = 10

        Имя переменной - это просто ссылка на объект, а 10 - это объект который находится где-то в памяти и хранит
        данные о том, что внутри этой ячейки памяти - число. И значения этого числа = 10.

    Что происходит, когда вы присваиваете одной переменной значение другой
        Предположим, что вы присвоили одной переменной значение другой. Например:

            number_one = 10
            number_two = number_one

        В таком случае вы получаете две ссылки на один и тот же объект.

    Работа с переменными неизменяемого типа
        Теперь попробуем после присвоения одной переменной значения другой, изменить значение другой. Как это сработает
        для переменных неизменяемого типа (например, для чисел)?

            number_one = 10
            number_two = number_one
            number_two = 5

        До изменения второй переменной (number_two), обе переменные (и number_one и number_two) ссылались на один и тоже
        объект (на одну и ту же ячейку в памяти). После изменения второй переменной (number_two), обе переменные
        (и number_one и number_two) ссылаются уже на разные объекты (на разные ячейки памяти)

    Работа с переменными неизменяемого типа
        Таким образом, при попытке изменения значения переменной неизменяемого типа, в памяти создается новый объект,
        и ссылка уже указывает на него. Из-за этого, после того, как вы присвоите одной переменной значения другой, вы
        тут же получите две ссылки на один объект. Если после этого вы измените значение одной из этих переменных, то
        получите две ссылки на два разных объекта. Как следствие, изменение значения одной переменной никак не влияет
        на значение другой. К переменным неизменяемого типа относят числа, строки, кортежи и т. д.

    Работа с переменными изменяемого типа
        Теперь попробуем после присвоения одной переменной значения другой, изменить значение другой. Как это сработает
        для переменных изменяемого типа (например, для списков)?

            number_one = [10]
            number_two = number_one
            number_two.append(5)

        До изменения второй переменной (number_two), обе переменные (и number_one и number_two) ссылались на один и тоже
        объект (на одну и ту же ячейку в памяти). После изменения второй переменной (number_two), обе переменные
        (и number_one и number_two) ссылаются уже на разные объекты (на разные ячейки памяти)

    При запуске интерпретатора Python, в памяти создается диапазон целых числе от мину 5 до 256 и когда юзер, создает
    какую-либо переменную, то эта переменная, будет ссылаться на пул этих чисел. Т. е., на конкретную ячейку в памяти,
    которая УЖЕ! хранит в себе это число. Например:
    
        a = -5
        b = -5
        c = 256
        d = 256
        print(a is b)
        print(c is d)
    
    будет True. Но, если 
        
        a = -6
        b = -6
        c = 257
        d = 257
        print(a is b)
        print(c is d)
    
    то будет False        
"""

# Работа с переменными неизменяемого типа. Что происходит, когда вы присваиваете одной переменной значение другой
a = 10
b = a
print(id(a))  # id() выводит (возвращает) "идентификатор" объекта (ячейки памяти)
print(id(b))

"""
    "Идентификатор" объекта (ячейки памяти) - это целое число, которое гарантированно будет уникальным и постоянным для
    # данного объекта в течение его жизни. Два объекта с непересекающимися временами жизни могут иметь одинаковое
    значение id().
"""

print(a is b)
"""
    Оператор is проверяет, ссылаются ли обе переменные (a и b) на один и тот же объект в памяти или нет.
    В данном случае, print выведет True
    
    Т. е. is возвращает True если обе переменные ссылаются на один объект,
    
    Есть противоположность оператору is - is not. is not - возвращает True если переменные ссылаются на разные объекты
"""
print("not is = ", a is not b)

print("sys.getrefcount = ", sys.getrefcount(b))

"""
    sys.getrefcount(object) - возвращает счетчик ссылок объекта. Возвращаемый счетчик обычно на единицу больше, чем можно было бы ожидать, потому
    что он включает (временную) ссылку в качестве аргумента для getrefcount().
"""

# Работа с переменными изменяемого типа
number_one = [10]
number_two = number_one
print(id(number_one))
print(id(number_two))
print(number_one is number_two)
number_two.append(5)
print(number_two)
print(id(number_one))
print(id(number_two))
print("sys.getrefcount: number_two = ", sys.getrefcount(number_two))

del number_two  # оператор del - удаляет переменную (ссылку на объект)
print("sys.getrefcount = ", sys.getrefcount(number_two)) # будет ошибка

print(help(number_one.remove()))
